* Console stuff:
	* "clear" command in the user mode shell
	* Color support (ANSI escapes?)
	Combined, this likely means adding some terminfo-ish terminal support; I have *NO* idea how that works, so it'll have to wait a bit.

* Copy-on-write fork()

* Rewrite the sleep/block system to handle:
	* sleep()
	* wait*()
	* mutexes
	* I/O (pipes, ATA)

* Pipes:
	* Proper blocking, including notifying tasks waiting when the last reader/writer is closed

* initrd:
	* Document the new initrd format (create_initrd.py, initrd.c)

* Try to recreate and fix the OS not running under QEMU 1.0 (qemu-kvm-1.0/x86_64)

* Improve the user-mode shell
	* Tab completion escaping (also add support for escaped spaces in argument parsing)
	* Pipe support
	* ; && and ||
	* !! and !cmd (and perhaps !-n) to look through history
	* Better parsing, e.g. 2>&1 works the same as 2> &1 does now; echo a>b writes 'a' to the file 'b' even without the space in between, etc.

* ext2:
	* ext2_read()


* sbrk: support negative arguments (to test: scandir in ext2/hugedir)

* create basic "find" utility, with little more than -name and/or -iname to begin with...?
* scandir on FAT returns < 0, but errno is not set! Why does it fail?

* serial input as a supplement to the keyboard? interrupt-driven, of course.
  Could be nice to use the native keymap inside the OS easily!

* VFS:
	* Improve /etc/mounts and fs_mount to specify disk+partition instead of the current system of autodetecting and only supporting 1 initrd, 1 FAT and 1 ext2 partition

* if getdents() is called *again* after returning 0, it will likely start over again; test this behaviour (also under Linux) and fix if necessary

* FAT: write support!
* DMA for ATA transfers?
* Signal support
* Proper VFS
* Implement the remaining syscalls for Newlib
* Implement queues for mutexes
* Directory caching - searching and stat()ing a "large" (20+ entries) directory is slow! 100+ is *very* slow!
